name: Mobile iOS Release (App Store)

on:
  push:
    branches: [main]

concurrency:
  group: mobile-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    name: Build and Upload to App Store Connect
    runs-on: macos-latest
    timeout-minutes: 90
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Select Xcode 16.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install JS deps (root)
        run: pnpm install --frozen-lockfile

      - name: Install JS deps (mobile app)
        run: pnpm --dir apps/mobile install --no-frozen-lockfile

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: apps/mobile/ios

      - name: Install iOS pods (with repo update)
        run: |
          cd apps/mobile/ios
          pod install --repo-update

      - name: Match SSH (optional)
        env:
          MATCH_SSH_PRIVATE_KEY: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$MATCH_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Deploy to App Store Connect
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: npx nx deploy-production mobile

      # Optional: Upload dSYMs to Sentry for better native stack traces
      - name: Install Sentry CLI (optional)
        if: ${{ success() && secrets.SENTRY_AUTH_TOKEN != '' }}
        run: |
          curl -sL https://sentry.io/get-cli/ | bash

      - name: Upload dSYMs to Sentry (optional)
        if: ${{ success() && secrets.SENTRY_AUTH_TOKEN != '' }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          LATEST_ARCHIVE=$(ls -t ~/Library/Developer/Xcode/Archives/*/*.xcarchive | head -n1 || true)
          if [ -z "$LATEST_ARCHIVE" ]; then
            echo "No xcarchive found; skipping dSYM upload"
            exit 0
          fi
          echo "Uploading dSYMs from: $LATEST_ARCHIVE"
          sentry-cli debug-files upload --include-sources "$LATEST_ARCHIVE/dSYMs"

      # Optional: Upload JS source maps with sentry-expo
      - name: Upload JS sourcemaps to Sentry (optional)
        if: ${{ success() && secrets.SENTRY_AUTH_TOKEN != '' }}
        working-directory: apps/mobile
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          BUNDLE=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" ios/mobile/Info.plist)
          VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" ios/mobile/Info.plist)
          BUILD=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" ios/mobile/Info.plist)
          export SENTRY_RELEASE="$BUNDLE@$VERSION+$BUILD"
          export SENTRY_DIST="$BUILD"
          npx sentry-expo upload-sourcemaps --appDirectory .

      - name: Upload Xcode/Gym Logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-gym-logs
          path: |
            ~/Library/Logs/gym/**/*
            ~/Library/Logs/scan/**/*
